import { JSONPath } from 'jsonpath-plus';

// --- –¢–∏–ø—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---

const DRAMA_LIST_FILE = 'drama-list.md';
const CONFIG_FILE = 'config.json';

interface Source {
  url: string;
  type: 'api';
  jsonPath: string;
}

// --- –õ–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON-—Ñ–∞–π–ª–∞.
 */
async function loadConfig(): Promise<Source[]> {
  const file = Bun.file(CONFIG_FILE);
  const exists = await file.exists();
  if (!exists) {
    throw new Error(`–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }
  try {
    const sources: Source[] = await file.json();
    return sources;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${CONFIG_FILE}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.`, { cause: error });
  }
}

/**
 * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª drama-list.md –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Set —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–æ—Ä–∞–º.
 */
async function getExistingDramas(): Promise<Set<string>> {
  const file = Bun.file(DRAMA_LIST_FILE);
  const exists = await file.exists();

  if (!exists) {
    console.log(`–§–∞–π–ª ${DRAMA_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.`);
    return new Set();
  }

  const content = await file.text();
  const lines = content.split('\n');
  
  const dramas = lines
    .map(line => line.trim())
    .filter(line => line && !line.startsWith('##') && !line.startsWith('# '))
    .map(line => line.replace(/^- /g, '').trim());

  return new Set(dramas);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–æ—Ä–∞–º—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 */
async function fetchDramasFromSource(source: Source): Promise<string[]> {
  try {
    const response = await fetch(source.url);
    if (!response.ok) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${source.url}: ${response.statusText}`);
      return [];
    }
    const json = await response.json();
    const titles = JSONPath({ path: source.jsonPath, json: json as any });
    
    return Array.isArray(titles) ? titles.filter(t => typeof t === 'string') : [];
  } catch (error) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ ${source.url}:`, error);
    return [];
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.
 */
function getTimestamp(): string {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const year = now.getFullYear();
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Ä–∞–º—ã –≤ —Ñ–∞–π–ª.
 */
async function appendNewDramas(newDramas: string[]): Promise<void> {
  const sortedDramas = [...newDramas].sort((a, b) => a.localeCompare(b));
  
  const timestamp = getTimestamp();
  const existingContent = await Bun.file(DRAMA_LIST_FILE).exists() ? await Bun.file(DRAMA_LIST_FILE).text() : "";

  let newSection = `\n## ${timestamp}\n`;
  newSection += sortedDramas.map(drama => `- ${drama}`).join('\n');
  newSection += '\n';

  await Bun.write(DRAMA_LIST_FILE, existingContent + newSection);
  
  console.log(`‚ú® –ù–∞–π–¥–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${sortedDramas.length} –Ω–æ–≤—ã—Ö –¥–æ—Ä–∞–º:`);
  sortedDramas.forEach(drama => console.log(`  - ${drama}`));
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –¥–æ—Ä–∞–º...');

  const SOURCES = await loadConfig();
  console.log(`üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${SOURCES.length}`);

  const existingDramas = await getExistingDramas();
  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${existingDramas.size} –¥–æ—Ä–∞–º –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ.`);

  const fetchPromises = SOURCES.map(fetchDramasFromSource);
  const results = await Promise.all(fetchPromises);
  const allFetchedDramas = new Set(results.flat().filter(Boolean)); // filter(Boolean) —É–±–µ—Ä–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

  console.log(`üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allFetchedDramas.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.`);

  const newDramas = [...allFetchedDramas].filter(drama => !existingDramas.has(drama));

  if (newDramas.length === 0) {
    console.log('‚úÖ –ù–æ–≤—ã—Ö –¥–æ—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
  } else {
    await appendNewDramas(newDramas);
  }
  
  console.log('üèÅ –†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
});