import { Bot } from 'grammy';
import { JSONPath } from 'jsonpath-plus';

// --- –¢–∏–ø—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---

const DRAMA_LIST_FILE = 'drama-list.md';
const CONFIG_FILE = 'config.json';

interface Source {
  name: string;
  url: string;
  type: 'api';
  jsonPath: string;
}

type ChatId = string | number;

interface TelegramConfig {
  botToken: string;
  chatId: ChatId[] | ChatId;
}

interface Config {
  sources: Source[];
  telegram: TelegramConfig;
}

// --- –õ–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ ---

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON-—Ñ–∞–π–ª–∞.
 */
async function loadConfig(): Promise<Config> {
  const file = Bun.file(CONFIG_FILE);
  const exists = await file.exists();
  if (!exists) {
    throw new Error(`–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  }
  try {
    const config: Config = await file.json();
    return config;
  } catch (error) {
    throw new Error(
      `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${CONFIG_FILE}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.`,
      { cause: error },
    );
  }
}

/**
 * –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª drama-list.md –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Set —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–æ—Ä–∞–º.
 */
async function getExistingDramas(): Promise<Set<string>> {
  const file = Bun.file(DRAMA_LIST_FILE);
  const exists = await file.exists();

  if (!exists) {
    console.log(`–§–∞–π–ª ${DRAMA_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.`);
    return new Set();
  }

  const content = await file.text();
  const lines = content.split('\n');

  const dramas = lines
    .map((line) => line.trim())
    .filter((line) => line && !line.startsWith('##') && !line.startsWith('# '))
    .map((line) => line.replace(/^- /g, '').trim());

  return new Set(dramas);
}

interface FetchedDramas {
  source: Source;
  titles: string[];
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–æ—Ä–∞–º—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 */
async function fetchDramasFromSource(source: Source): Promise<FetchedDramas> {
  try {
    const response = await fetch(source.url);
    if (!response.ok) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${source.url}: ${response.statusText}`,
      );
      return { source, titles: [] };
    }
    const json = await response.json();
    const titles = JSONPath({ path: source.jsonPath, json: json as any });

    const fetchedTitles = Array.isArray(titles)
      ? titles.filter((t) => typeof t === 'string')
      : [];
    return { source, titles: fetchedTitles };
  } catch (error) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ ${source.url}:`, error);
    return { source, titles: [] };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.
 */
function getTimestamp(): string {
  const now = new Date();
  const day = String(now.getDate()).padStart(2, '0');
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const year = now.getFullYear();
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Ä–∞–º—ã –≤ —Ñ–∞–π–ª.
 */
async function appendNewDramas(
  newDramasBySource: Map<string, string[]>,
): Promise<void> {
  const timestamp = getTimestamp();
  const existingContent = (await Bun.file(DRAMA_LIST_FILE).exists())
    ? await Bun.file(DRAMA_LIST_FILE).text()
    : '';

  let newSection = `\n## ${timestamp}\n`;
  for (const [sourceName, dramas] of newDramasBySource.entries()) {
    newSection += `### ${sourceName}\n`;
    newSection += dramas.map((drama) => `- ${drama}`).join('\n');
    newSection += '\n';
  }

  await Bun.write(DRAMA_LIST_FILE, existingContent + newSection);

  console.log(
    `‚ú® –ù–∞–π–¥–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${newDramasBySource.size} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –¥–æ—Ä–∞–º–∞–º–∏:`,
  );
  for (const [sourceName, dramas] of newDramasBySource.entries()) {
    console.log(`  - ${sourceName}: ${dramas.length} –¥–æ—Ä–∞–º`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
 */
async function sendTelegramNotification(
  botToken: string,
  chatIds: ChatId[] | ChatId,
  newDramasBySource: Map<string, string[]>,
): Promise<void> {
  if (
    !botToken ||
    !chatIds ||
    (Array.isArray(chatIds) && chatIds.length === 0)
  ) {
    console.log(
      'üîî –¢–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞ –¥–ª—è Telegram –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.',
    );
    return;
  }

  const bot = new Bot(botToken);
  let message = `<b>‚ú® –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Ä–∞–º—ã!</b>\n\n`;

  for (const [sourceName, dramas] of newDramasBySource.entries()) {
    message += `<b>${sourceName}:</b>\n`;
    message += dramas.map((d) => `‚Ä¢ ${d}`).join('\n');
    message += '\n\n';
  }

  const ids = Array.isArray(chatIds) ? chatIds : [chatIds];

  for (const chatId of ids) {
    try {
      await bot.api.sendMessage(chatId, message, { parse_mode: 'HTML' });
      console.log(
        `üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}.`,
      );
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≤ —á–∞—Ç ${chatId}:`,
        error,
      );
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –¥–æ—Ä–∞–º...');

  const config = await loadConfig();
  const { sources, telegram } = config;
  console.log(
    `üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${sources.length}`,
  );

  const existingDramas = await getExistingDramas();
  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${existingDramas.size} –¥–æ—Ä–∞–º –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ.`);

  const fetchPromises = sources.map(fetchDramasFromSource);
  const results = await Promise.all(fetchPromises);

  const newDramasBySource = new Map<string, string[]>();
  let totalNewDramas = 0;

  for (const result of results) {
    const newTitles = result.titles.filter(
      (title) => !existingDramas.has(title),
    );
    if (newTitles.length > 0) {
      newDramasBySource.set(result.source.name ?? result.source.url, newTitles);
      totalNewDramas += newTitles.length;
    }
  }

  console.log(`üì• –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${totalNewDramas} –Ω–æ–≤—ã—Ö –¥–æ—Ä–∞–º.`);

  if (totalNewDramas === 0) {
    console.log('‚úÖ –ù–æ–≤—ã—Ö –¥–æ—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
  } else {
    await appendNewDramas(newDramasBySource);
    await sendTelegramNotification(
      telegram.botToken,
      telegram.chatId,
      newDramasBySource,
    );
  }

  console.log('üèÅ –†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

// –ó–∞–ø—É—Å–∫
main().catch((error) => {
  console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});
